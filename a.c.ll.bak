; ModuleID = 'Module a'
source_filename = "Module a"

@gLVTable = internal global [8192 x i8*] zeroinitializer, align 8
@gNCDebugHeap = external global i32

declare void @__builtin_memcpy(i8*, i8*, i64, i1)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #0

declare void @__builtin_memmove(i8*, i8*, i64, i1)

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #0

declare i16 @__builtin_bswap16(i16)

declare i64 @__builtin_bswap64(i64)

declare i32 @__builtin_bswap32(i32)

declare void @__builtin_memset(i8*, i8, i64, i1)

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i64, i1) #0

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #1

declare void @__builtin_va_start(i8*)

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

declare void @__builtin_va_end(i8*)

define i32 @fun(i32 %a, i32 %b) !dbg !5 {
entry:
  %andand_result_var = alloca i1, !dbg !9
  %andand_result_var1 = alloca i1, !dbg !9
  %lvtable = alloca [8192 x i8*], !dbg !9
  %0 = bitcast [8192 x i8*]* %lvtable to i8*, !dbg !9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([8192 x i8*]* @gLVTable to i8*), i64 65536, i1 false), !dbg !9
  %a2 = alloca i32, !dbg !9
  store i32 %a, i32* %a2, align 4, !dbg !9
  %1 = bitcast i32* %a2 to i8*, !dbg !9
  store i8* %1, i8** getelementptr inbounds ([8192 x i8*], [8192 x i8*]* @gLVTable, i32 0, i32 0), align 8, !dbg !9
  %b3 = alloca i32, !dbg !9
  store i32 %b, i32* %b3, align 4, !dbg !9
  %2 = bitcast i32* %b3 to i8*, !dbg !9
  store i8* %2, i8** getelementptr inbounds ([8192 x i8*], [8192 x i8*]* @gLVTable, i32 0, i32 1), align 8, !dbg !9
  %a4 = load i32, i32* %a2, align 4, !dbg !10
  %b5 = load i32, i32* %b3, align 4, !dbg !10
  %addtmp = add nsw i32 %a4, %b5, !dbg !10
  %3 = bitcast [8192 x i8*]* %lvtable to i8*, !dbg !10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([8192 x i8*]* @gLVTable to i8*), i8* %3, i64 65536, i1 false), !dbg !10
  ret i32 %addtmp, !dbg !10
}

define i32 @main() !dbg !11 {
entry:
  %andand_result_var = alloca i1, !dbg !14
  %andand_result_var1 = alloca i1, !dbg !14
  %lvtable = alloca [8192 x i8*], !dbg !14
  %0 = bitcast [8192 x i8*]* %lvtable to i8*, !dbg !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([8192 x i8*]* @gLVTable to i8*), i64 65536, i1 false), !dbg !14
  %1 = call i32 @fun(i32 1, i32 2), !dbg !15
  %a = alloca i32, !dbg !16
  %2 = bitcast i32* %a to i8*, !dbg !16
  store i8* %2, i8** getelementptr inbounds ([8192 x i8*], [8192 x i8*]* @gLVTable, i32 0, i32 0), align 8, !dbg !16
  store i32 0, i32* %a, align 4, !dbg !16
  %b = alloca i32, !dbg !17
  %3 = bitcast i32* %b to i8*, !dbg !17
  store i8* %3, i8** getelementptr inbounds ([8192 x i8*], [8192 x i8*]* @gLVTable, i32 0, i32 1), align 8, !dbg !17
  store i32 1, i32* %b, align 4, !dbg !17
  %b2 = load i32, i32* %b, align 4, !dbg !18
  %a3 = load i32, i32* %a, align 4, !dbg !18
  %divtmp = sdiv i32 %b2, %a3, !dbg !18
  %c = alloca i32, !dbg !18
  %4 = bitcast i32* %c to i8*, !dbg !18
  store i8* %4, i8** getelementptr inbounds ([8192 x i8*], [8192 x i8*]* @gLVTable, i32 0, i32 2), align 8, !dbg !18
  store i32 %divtmp, i32* %c, align 4, !dbg !18
  %5 = bitcast [8192 x i8*]* %lvtable to i8*, !dbg !19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([8192 x i8*]* @gLVTable to i8*), i8* %5, i64 65536, i1 false), !dbg !19
  ret i32 0, !dbg !19
}

attributes #0 = { argmemonly nounwind }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "neo-c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "a.c", directory: "/home/ab25cq/repo/comelang")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "fun", linkageName: "fun", scope: !1, file: !1, line: 1, type: !6, isLocal: false, isDefinition: true, scopeLine: 1, flags: DIFlagPublic, isOptimized: false, unit: !0, retainedNodes: !2)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !8}
!8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!9 = !DILocation(line: 1, scope: !5)
!10 = !DILocation(line: 3, scope: !5)
!11 = distinct !DISubprogram(name: "main", linkageName: "main", scope: !1, file: !1, line: 6, type: !12, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPublic, isOptimized: false, unit: !0, retainedNodes: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{!8}
!14 = !DILocation(line: 6, scope: !11)
!15 = !DILocation(line: 8, scope: !11)
!16 = !DILocation(line: 10, scope: !11)
!17 = !DILocation(line: 11, scope: !11)
!18 = !DILocation(line: 12, scope: !11)
!19 = !DILocation(line: 14, scope: !11)
