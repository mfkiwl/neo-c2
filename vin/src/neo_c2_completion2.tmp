#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <ncurses.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <limits.h>

void ViWin::toggleBraceForward(ViWin* self, wchar_t head, wchar_t tail) 
{
    int cursor_y = self.scroll + self.cursorY;
    int cursor_x = -1;

    int nest = 0;

    auto line = self.texts.item(cursor_y, null);

    wchar_t* p = line + self.cursorX+1;
    
    bool squort = false;
    bool dquort = false;

    while(p < line + line.length()) { 
        if(!dquort && *p == '\'') {
            p++;
            squort = !squort;
        }
        else if(!squort && *p == '"') {
            p++;
            dquort = !dquort;
        }
        else if(squort || dquort) {
            p++;
        }
        else if(*p == '\\') {
            p+=2;
        }
        else if(*p == tail) {
            if(nest == 0) {
                self.saveReturnPoint();

                cursor_x = (p - line);
                self.cursorX = cursor_x;
                return;
            }

            p++;
            nest--;
        }
        else if(*p == head) {
            p++;

            nest++;
        }
        else {
            p++;
        }
    }

    if(cursor_x == -1) {
        cursor_y++;

        int it2 = 0;
        foreach(it, self.texts.sublist(self.scroll+self.cursorY+1, -1)) {
            wchar_t* p = it;

            while(p < it + it.length()) {
                if(!dquort && *p == '\'') {
                    p++;
                    squort = !squort;
                }
                else if(!squort && *p == '"') {
                    p++;
                    dquort = !dquort;
                }
                else if(squort || dquort) {
                    p++;
                }
                else if(*p == '\\') {
                    p+=2;
                }
                else if(*p == tail) {
                    if(nest == 0) {
                        self.saveReturnPoint();

                        self.scroll = it2 + self.scroll + self.cursorY + 1;
                        self.cursorY = 0;
                        self.cursorX = p - it;
                        self.modifyOverCursorXValue();
                        self.centeringCursor();
                        return;
                    }

                    p++;
                    nest--;
                }
                else if(*p == head) {
                    p++;

                    nest++;
                }
                else {
                    p++;
                }
            }

            cursor_y++;
            it2++;
        }
    }
}

void ViWin::toggleBraceBack(ViWin* self, wchar_t head, wchar_t tail) 
{
    int nest = 0;

    auto line = self.texts.item(self.scroll + self.cursorY, null);

    wchar_t* p = line + self.cursorX-1;
    
    bool dquort = false;
    bool squort = false;

    while(p >= line) {
        if(!dquort && *p == '\'') {
            p--;
            squort = !squort;
        }
        else if(!squort && *p == '"') {
            p--;
            dquort = !dquort;
        }
        else if(squort || dquort) {
            p--;
        }
        else if(*p == head) {
            if(nest == 0) {
                self.saveReturnPoint();
                
                self.cursorX = p -line;
                self.modifyOverCursorXValue();
                return;
            }

            p--;
            nest--;
        }
        else if(*p == tail) {
            p--;

            nest++;
        }
        else {
            p--;
        }
    }

    for(int i=self.scroll+self.cursorY-1; i>=0; i--) {
        wstring it = self.texts.item(i, null);
        
        wchar_t* p = it + it.length();
        
        while(p >= it) {
            if(!dquort && *p == '\'') {
                p--;
                squort = !squort;
            }
            else if(!squort && *p == '"') {
                p--;
                dquort = !dquort;
            }
            else if(squort || dquort) {
                p--;
            }
            else if(*p == head) {
                if(nest == 0) {
                    self.saveReturnPoint();

                    self.scroll = i;
                    self.cursorY = 0;
                    self.modifyUnderCursorYValue();
                    self.cursorX = p - it;
                    self.modifyOverCursorXValue();
                    self
